{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mapbox-travel-advisor-master\\\\src\\\\components\\\\Map\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState, useCallback, useMemo } from \"react\";\nimport { Paper, Typography, useMediaQuery } from \"@mui/material\";\nimport Rating from \"@mui/material/Rating\";\nimport LocationOnOutlinedIcon from \"@mui/icons-material/LocationOnOutlined\";\nimport MapGL, { GeolocateControl, Marker } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport useStyles from \"./styles\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport mapboxgl from 'mapbox-gl';\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\"; // eslint-disable-next-line import/no-webpack-loader-syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOXGL_ACCESS_TOKEN;\n\nconst Map = ({\n  places,\n  setBounds,\n  setClickedMarker,\n  containerRef,\n  mode\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const desktopScreen = useMediaQuery(\"(min-width:600px)\");\n  const [viewport, setViewport] = useState({\n    latitude: 16.806513845650294,\n    longitude: 96.15593339811613,\n    zoom: 12.303149558712713\n  });\n  const mapRef = useRef();\n  useEffect(() => {\n    const bounds = mapRef.current.getMap().getBounds();\n    setBounds({\n      ne: bounds._ne,\n      sw: bounds._sw\n    });\n  }, [setBounds]);\n  const handleViewportChange = useCallback(newViewport => {\n    setViewport(newViewport);\n  }, []);\n  const handleGeocoderViewportChange = useCallback(newViewport => {\n    const geocoderDefaultOverrides = {\n      transitionDuration: 1000\n    };\n    handleViewportChange({ ...newViewport,\n      ...geocoderDefaultOverrides\n    });\n  }, [handleViewportChange]);\n  const handleTransitionEnd = useCallback(() => {\n    const bounds = mapRef.current.getMap().getBounds();\n    setBounds({\n      ne: bounds._ne,\n      sw: bounds._sw\n    });\n  }, [setBounds]);\n  const markers = useMemo(() => places === null || places === void 0 ? void 0 : places.map((place, i) => {\n    if (!isNaN(place.longitude)) {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        longitude: Number(place.longitude),\n        latitude: Number(place.latitude),\n        className: classes.markerContainer,\n        offsetLeft: -20,\n        offsetTop: -10,\n        onClick: () => {\n          setClickedMarker(i);\n        },\n        children: !desktopScreen ? /*#__PURE__*/_jsxDEV(LocationOnOutlinedIcon, {\n          color: \"primary\",\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.typography,\n            variant: \"subtitle2\",\n            gutterBottom: true,\n            children: [\" \", place.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.pointer,\n            alt: place.name,\n            src: place.photo ? place.photo.images.large.url : \"https://jooinn.com/images/blur-restaurant-1.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Rating, {\n            name: \"read-only\",\n            size: \"small\",\n            value: Number(place.rating),\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this);\n    } else {\n      return null;\n    }\n  }), [places, desktopScreen, classes.markerContainer, classes.paper, classes.pointer, classes.typography, setClickedMarker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.mapContainer,\n    children: /*#__PURE__*/_jsxDEV(MapGL, {\n      ref: mapRef,\n      ...viewport,\n      width: \"100%\",\n      height: \"100%\",\n      onViewportChange: handleViewportChange,\n      onTransitionEnd: handleTransitionEnd,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      mapStyle: mode === 'light' ? \"mapbox://styles/mapbox/streets-v11\" : \"mapbox://styles/mapbox/dark-v10\",\n      children: [/*#__PURE__*/_jsxDEV(Geocoder, {\n        mapRef: mapRef,\n        containerRef: containerRef,\n        onViewportChange: handleGeocoderViewportChange,\n        mapboxApiAccessToken: MAPBOX_TOKEN,\n        inputValue: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GeolocateControl, {\n        style: {\n          top: 10,\n          right: 10\n        },\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true,\n        auto: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), markers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Map, \"avfPMlQQ+GM5jGhqoHNQx7JmP7U=\", false, function () {\n  return [useStyles, useMediaQuery];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/Users/User/Desktop/mapbox-travel-advisor-master/src/components/Map/Map.jsx"],"names":["React","useRef","useEffect","useState","useCallback","useMemo","Paper","Typography","useMediaQuery","Rating","LocationOnOutlinedIcon","MapGL","GeolocateControl","Marker","Geocoder","useStyles","mapboxgl","workerClass","require","default","MAPBOX_TOKEN","process","env","REACT_APP_MAPBOXGL_ACCESS_TOKEN","Map","places","setBounds","setClickedMarker","containerRef","mode","classes","desktopScreen","viewport","setViewport","latitude","longitude","zoom","mapRef","bounds","current","getMap","getBounds","ne","_ne","sw","_sw","handleViewportChange","newViewport","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","handleTransitionEnd","markers","map","place","i","isNaN","Number","markerContainer","paper","typography","name","pointer","photo","images","large","url","rating","mapContainer","top","right","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React, {\n    useRef,\n    useEffect,\n    useState,\n    useCallback,\n    useMemo,\n} from \"react\";\nimport { Paper, Typography, useMediaQuery } from \"@mui/material\";\nimport Rating from \"@mui/material/Rating\";\nimport LocationOnOutlinedIcon from \"@mui/icons-material/LocationOnOutlined\";\n\nimport MapGL, { GeolocateControl, Marker } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\n\nimport useStyles from \"./styles\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport mapboxgl from 'mapbox-gl';\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOXGL_ACCESS_TOKEN;\n\nconst Map = ({ places, setBounds, setClickedMarker, containerRef, mode }) => {\n    const classes = useStyles();\n    const desktopScreen = useMediaQuery(\"(min-width:600px)\");\n\n    const [viewport, setViewport] = useState({\n        latitude: 16.806513845650294,\n        longitude: 96.15593339811613,\n        zoom: 12.303149558712713,\n    });\n\n    const mapRef = useRef();\n\n    useEffect(() => {\n        const bounds = mapRef.current.getMap().getBounds();\n        setBounds({\n            ne: bounds._ne,\n            sw: bounds._sw,\n        });\n    }, [setBounds]);\n\n    const handleViewportChange = useCallback((newViewport) => {\n        setViewport(newViewport);\n    }, []);\n\n    const handleGeocoderViewportChange = useCallback((newViewport) => {\n        const geocoderDefaultOverrides = { transitionDuration: 1000 };\n        handleViewportChange({\n            ...newViewport,\n            ...geocoderDefaultOverrides,\n        });\n    }, [handleViewportChange]);\n\n    const handleTransitionEnd = useCallback(() => {\n        const bounds = mapRef.current.getMap().getBounds();\n        setBounds({\n            ne: bounds._ne,\n            sw: bounds._sw,\n        });\n    }, [setBounds]);\n\n    const markers = useMemo(() =>\n        places?.map((place, i) => {\n            if (!isNaN(place.longitude)) {\n                return (\n                    <Marker\n                        longitude={Number(place.longitude)}\n                        latitude={Number(place.latitude)}\n                        key={i}\n                        className={classes.markerContainer}\n                        offsetLeft={-20}\n                        offsetTop={-10}\n                        onClick={() => {\n                            setClickedMarker(i);\n                        }}\n                    >\n                        {!desktopScreen ? (\n                            <LocationOnOutlinedIcon\n                                color=\"primary\"\n                                fontSize=\"large\"\n                            />\n                        ) : (\n                            <Paper elevation={3} className={classes.paper}>\n                                <Typography\n                                    className={classes.typography}\n                                    variant=\"subtitle2\"\n                                    gutterBottom\n                                >\n                                    {\" \"}\n                                    {place.name}\n                                </Typography>\n                                <img\n                                    className={classes.pointer}\n                                    alt={place.name}\n                                    src={\n                                        place.photo\n                                            ? place.photo.images.large.url\n                                            : \"https://jooinn.com/images/blur-restaurant-1.png\"\n                                    }\n                                />\n                                <Rating\n                                    name=\"read-only\"\n                                    size=\"small\"\n                                    value={Number(place.rating)}\n                                    readOnly\n                                />\n                            </Paper>\n                        )}\n                    </Marker>\n                );\n            } else {\n                return null;\n            }\n        }),\n        [\n            places,\n            desktopScreen,\n            classes.markerContainer,\n            classes.paper,\n            classes.pointer,\n            classes.typography,\n            setClickedMarker,\n        ]\n    );\n\n    return (\n        <div className={classes.mapContainer}>\n            <MapGL\n                ref={mapRef}\n                {...viewport}\n                width=\"100%\"\n                height=\"100%\"\n                onViewportChange={handleViewportChange}\n                onTransitionEnd={handleTransitionEnd}\n                mapboxApiAccessToken={MAPBOX_TOKEN}\n                mapStyle={mode === 'light' ? \"mapbox://styles/mapbox/streets-v11\" : \"mapbox://styles/mapbox/dark-v10\"}\n            >\n                <Geocoder\n                    mapRef={mapRef}\n                    containerRef={containerRef}\n                    onViewportChange={handleGeocoderViewportChange}\n                    mapboxApiAccessToken={MAPBOX_TOKEN}\n                    inputValue=\"\"\n                />\n                <GeolocateControl\n                    style={{ top: 10, right: 10 }}\n                    positionOptions={{ enableHighAccuracy: true }}\n                    trackUserLocation={true}\n                    auto\n                />\n                {markers}\n            </MapGL>\n        </div>\n    );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}